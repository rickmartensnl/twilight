searchState.loadedDescShard("twilight_http", 0, "twilight-http\nDiscord API version used by this crate.\nTyped request builders, multipart form support, a manual …\nResponse utility type and related types.\nSomething was wrong with the provided fields.\nSomething was wrong with the input when sending a message.\nSending a message failed because the provided fields …\nField within a <code>MessageApiError</code> embed list.\nRequest has been ratelimited.\nThe provided timestamp wasn’t a valid RFC3339 string.\nFields within a provided embed were invalid.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the ratelimit is a global ratelimit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHuman readable message provided by the API.\nAmount of time to wait before retrying.\nTwilight’s http client.\nA builder for <code>Client</code>.\nClient interface for using interactions.\nReturns all active threads in the guild.\nAdd a user to a guild.\nAdd a role to a member in a guild.\nAdd another member to a thread.\nGet the audit log for a guild.\nGet an auto moderation rule in a guild.\nGet the auto moderation rules in a guild.\nGet information about a ban of a guild.\nRetrieve the bans for a guild.\nBuild the <code>Client</code>.\nCreate a new builder to create a client.\nGet a channel by its ID.\nGet the invites for a guild channel.\nGet channel messages, by <code>Id&lt;ChannelMarker&gt;</code>.\nGet all the webhooks of a channel.\nFetch command permissions for a command from the current …\nCreate an auto moderation rule within a guild.\nBans a user from a guild, optionally with the number of …\nCreate an emoji in a guild.\nCreate a followup message to an interaction, by its token.\nStart a thread in a forum channel.\nCreate a new global command.\nCreate a new request to create a guild.\nCreate a new request to create a guild channel.\nCreate a new command in a guild.\nCreate a new guild based on a template.\nBegin a guild prune.\nCreate a scheduled event in a guild.\nCreates a sticker in a guild, and returns the created …\nCreate an invite, with options.\nSend a message to a channel.\nCreate a new pin in a channel, by ID.\nCreate a DM channel with a user.\nCreate a reaction in a <code>Id&lt;ChannelMarker&gt;</code> on a …\nRespond to an interaction, by its ID and token.\nCreate a role in a guild.\nCreate a new stage instance associated with a stage …\nCreate a template from the current state of the guild.\nCreates a test entitlement to a given SKU for a given …\nStart a thread that is not connected to a message.\nCreate a new thread from an existing message.\nFire a Typing Start event in the channel.\nCreate a webhook in a channel.\nCrosspost a message by <code>Id&lt;ChannelMarker&gt;</code> and …\nGet information about the current OAuth2 authorization.\nGet information about the current user.\nGet information about the current bot application.\nGet the current user’s connections.\nGet information about the current user in a guild.\nReturns a list of guilds for the current user.\nSet the default allowed mentions setting to use on all …\nGet an immutable reference to the default <code>AllowedMentions</code> …\nSet a group headers which are sent in every request.\nRemove all reactions on a message of an emoji.\nDelete all reactions by all users on a message.\nDelete an auto moderation rule in a guild.\nRemove a ban from a user in a guild.\nDelete a channel by ID.\nDelete the current user’s (<code>@me</code>) reaction on a message.\nDelete an emoji in a guild, by id.\nDelete a followup message to an interaction, by its token …\nDelete a global command, by ID.\nDelete a guild permanently. The user must be the owner.\nDelete a command in a guild, by ID.\nDelete an integration for a guild, by the integration’s …\nDelete a scheduled event in a guild.\nDeletes a guild sticker by the ID of the guild and its ID.\nDelete an invite by its code.\nDelete a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>…\nDelete messages by <code>Id&lt;ChannelMarker&gt;</code> and Vec&lt;…\nDelete a pin in a channel, by ID.\nDelete a reaction by a user on a message.\nDelete the original message, by its token.\nDelete a role in a guild, by id.\nDelete the stage instance of a stage channel.\nDelete a template by ID and code.\nDeletes a currently-active test entitlement. Discord will …\nDelete a webhook by its ID.\nDelete a message executed by a webhook.\nGet an emoji for a guild by the the guild’s ID and emoji…\nGet the emojis for a guild, by the guild’s id.\nEnds a poll in a channel.\nGet the entitlements for an application.\nExecute a webhook, sending a message to its channel.\nFollows a news channel by <code>Id&lt;ChannelMarker&gt;</code>.\nGet a followup message of an interaction, by its token and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about the gateway, optionally with …\n/// Get the voters for an answer in a poll.\nReturns all SKUs for a given application.\nGet a template by its code.\nGet a list of templates in a guild, by ID.\nFetch a global command for your application.\nFetch all global commands for your application.\nGet information about a guild.\nGet the channels in a guild.\nFetch a guild command for your application.\nFetch command permissions for all commands from the current\nFetch all commands for a guild, by ID.\nGet the guild’s integrations.\nGet information about the invites of a guild.\nGet a member of a guild, by their id.\nGet the members of a guild, by id.\nRetrieves the onboarding data for a guild.\nFor public guilds, get the guild preview.\nGet the counts of guild members to be pruned.\nGet a scheduled event in a guild.\nGet a list of users subscribed to a scheduled event.\nGet a list of scheduled events in a guild.\nReturns a guild sticker by the guild’s ID and the sticker…\nReturns a list of stickers in a guild.\nGet a guild’s vanity url, if there is one.\nGet voice region data for the guild.\nGet the webhooks of a guild.\nGet the guild’s welcome screen.\nGet a guild’s widget.\nGet a guild’s widget settings.\nCreate an interface for using interactions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet information about an invite by its code.\nAdd the current user to a thread.\nReturns archived private threads in the channel that the …\nLeave a guild by id.\nRemove the current user from a thread.\nGet a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>.\nCreate a new builder to create a <code>Client</code>.\nCreate a new client with a token.\nReturns a list of sticker packs available to Nitro …\nGet the pins of a channel.\nReturns archived private threads in the channel.\nSet the proxy to use for all HTTP(S) requests.\nReturns archived public threads in the channel.\nSet a ratelimiter to use.\nGet the Ratelimiter used by the client internally.\nGet a list of users that reacted to a message with an <code>emoji</code>…\nWhether to remember whether the client has encountered an …\nKick a member from a guild.\nRemove a role from a member in a guild, by id.\nRemove another member from a thread.\nExecute a request, returning a future resolving to a …\nGet the original message, by its token.\nGet the roles of a guild.\nSearch the members of a specific guild by a query.\nSet global commands.\nSet a guild’s commands.\nGets the stage instance associated with a stage channel, …\nReturns a single sticker by its ID.\nSync a template to the current state of the guild, by ID …\nReturns a <code>ThreadMember</code> in a thread.\nReturns the <code>ThreadMember</code>s of the thread.\nSet the timeout for HTTP requests.\nSet the token to use for HTTP requests.\nRetrieve an immutable reference to the token used by the …\nUpdate an auto moderation rule in a guild.\nUpdate a channel.\nUpdate the permissions for a role or a user in a channel.\nUpdate command permissions for a single command in a guild.\nUpdate the user’s member in a guild.\nUpdate the current user.\nUpdate the current user’s application.\nUpdate the current user’s voice state.\nUpdate an emoji in a guild, by id.\nEdit a followup message of an interaction, by its token …\nEdit a global command, by ID.\nUpdate a guild.\nModify the positions of the channels.\nEdit a command in a guild, by ID.\nUpdate a guild member.\nUpdate a guild’s MFA level.\nModify the guild onboarding flow.\nUpdate a scheduled event in a guild.\nUpdates a sticker in a guild, and returns the updated …\nUpdate the guild’s welcome screen.\nModify a guild’s widget.\nUpdate a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>…\nEdit the original message, by its token.\nUpdate a role by guild id and its id.\nModify the position of the roles.\nUpdate fields of an existing stage instance.\nUpdate the template’s metadata, by ID and code.\nUpdate a thread.\nUpdate another user’s voice state.\nUpdate a webhook by ID.\nUpdate a message executed by a webhook.\nUpdate a webhook, with a token, by ID.\nGet a user’s information by id.\nGet a list of voice regions that can be used when creating …\nGet a webhook by ID.\nGet a webhook message by webhook ID, token, and message ID.\nType of <code>Error</code> that occurred.\nAPI service is unavailable. Consider re-sending the …\nToken in use has become revoked or is otherwise invalid.\nA field failed validation requirements during request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nAttach a reason for a request.\nDelete a resource.\nRetrieve a resource.\nRetrieve information about the current OAuth2 …\nGet information about the gateway, optionally with …\nGet information about the gateway, authenticated as a bot …\nGet a list of voice regions that can be used when creating …\nHTTP request method.\nUpdate a resource.\nCreate a resource.\nReplace a resource.\nBuilder to create a customized request.\nConvert a typed request builder into a raw <code>Request</code>.\nUpdate the current user’s application.\nCall to authenticate this request.\nSet the contents of the body.\nBody of the request, if any.\nConsume the builder, returning the built request.\nConsume the form, returning the buffer’s contents.\nCreate a new request builder.\nGet the form’s appropriate content type for requests.\nSets the cover image of the application.\nSets the custom install URL of the application.\nSets the description of the application.\nSets the flags of the application. Only limited intent …\nSet the multipart form.\nMultipart form of the request, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a request from only its route information.\nSet the headers to add.\nHeaders to set in the request, if any.\nSets the icon of the application.\nSets the install params of the application.\nSets the interactions endpoint URL of the application.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the body, to be serialized as JSON.\nPreview the built buffer’s length without consuming the …\nMethod when sending the request.\nName of the method.\nCreate a new request builder.\nString path of the full URL.\nPath used for ratelimiting.\nCreate a request with raw information about the method, …\nAttach an audit log reason to the request.\nSets the role connections verification URL of the …\nRequest builders for interacting with scheduled events.\nSets the tags of the application.\nTry to convert a request builder into a raw <code>Request</code>.\nWhether to use the client’s authorization token in the …\nWhether to use the client’s authorization token in the …\nDelete a global command, by ID.\nDelete a command in a guild, by ID.\nFetch command permissions for a command from the current …\nRetrieve a global command for an application.\nRetrieve all global commands for an application.\nRetrieve a global command for an application.\nGet command permissions for all commands from the current …\nFetch all commands for a guild, by ID.\nSet global commands.\nSet a guild’s commands.\nUpdate command permissions for a single command in a guild.\nEdit a global command, by ID.\nEdit a command in a guild, by ID.\nEdit the command options of the command.\nEdit the command options of the command.\nEdit the description of the command.\nEdit the description of the command.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEdit the name of the command.\nEdit the name of the command.\nEdit whether the command is age-restricted.\nEdit whether the command is age-restricted.\nWhether to include full localization dictionaries in the …\nWhether to include full localization dictionaries in the …\nCreate a new chat input global command.\nCreate a new global command.\nCreate a new message global command.\nCreate a new user global command.\nCreate a new chat input global command.\nAdd a list of command options.\nDefault permissions required for a member to run the …\nDefault permissions required for a member to run the …\nDefault permissions required for a member to run the …\nSet the localization dictionary for the command …\nSet whether the command is available in DMs.\nSet whether the command is available in DMs.\nSet whether the command is available in DMs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new message global command.\nSet the localization dictionary for the command name.\nSet the localization dictionary for the command name.\nSet the localization dictionary for the command name.\nSet whether the command is age-restricted.\nSet whether the command is age-restricted.\nSet whether the command is age-restricted.\nCreate a new user global command.\nCreate a chat input command in a guild.\nCreate a new command in a guild.\nCreate a message command in a guild.\nCreate a user command in a guild.\nCreate a chat input command in a guild.\nAdd a list of command options.\nDefault permissions required for a member to run the …\nDefault permissions required for a member to run the …\nDefault permissions required for a member to run the …\nSet the localization dictionary for the command …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a message command in a guild.\nSet the localization dictionary for the command name.\nSet the localization dictionary for the command name.\nSet the localization dictionary for the command name.\nSet whether the command is age-restricted.\nSet whether the command is age-restricted.\nSet whether the command is age-restricted.\nCreate a user command in a guild.\nCreate a followup message to an interaction, by its token.\nRespond to an interaction, by its ID and token.\nDelete the original message, by its token.\nDelete a followup message to an interaction, by its token …\nGet a followup message of an interaction, by its token and …\nGet the original message, by its token.\nEdit a followup message of an interaction, by its token …\nEdit the original message, by its token.\nSpecify the <code>AllowedMentions</code> for the message.\nSpecify the <code>AllowedMentions</code> for the message.\nSpecify the <code>AllowedMentions</code> for the message.\nAttach multiple files to the message.\nAttach multiple new files to the message.\nAttach multiple new files to the message.\nAdd multiple <code>Component</code>s to a message.\nSet the message’s list of <code>Component</code>s.\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s content.\nSet the message’s content.\nSet the message’s list of embeds.\nSet the message’s list of embeds.\nSet the message’s list of embeds.\nSet the message’s flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecify multiple <code>Id&lt;AttachmentMarker&gt;</code>s already present in …\nSpecify multiple <code>Id&lt;AttachmentMarker&gt;</code>s already present in …\nJSON encoded body of any additional request fields.\nJSON encoded body of any additional request fields.\nJSON encoded body of any additional request fields.\nSpecify true if the message is TTS.\nOwner of a test entitlement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet all entitlements for a given app, active and expired.\nRetrieve entitlements after this time.\nRetrieve entitlements before this time.\nWhether to exclude ended entitlements.\nReturns the argument unchanged.\nGuild ID to look up entitlements for.\nCalls <code>U::from(self)</code>.\nNumber of entitlements to return. Set to 100 if …\nList of SKU IDs to check entitlements for.\nUser ID to look up entitlements for.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new pin in a channel.\nFire a Typing Start event in the channel.\nDelete a channel by ID.\nClear the permissions for a target ID in a channel.\nClear the permissions for a target ID in a channel.\nDelete a pin in a channel, by ID.\nFollow a news channel by <code>Id&lt;ChannelMarker&gt;</code>s.\nGet a channel by its ID.\nGet the pins of a channel.\nUpdate a channel.\nUpdate the permissions for a role or a user in a channel.\nSet the available tags for the forum.\nFor voice and stage channels, set the bitrate of the …\nSet the default layout for forum channels.\nSet the default reaction emoji for new forum threads.\nSet the default sort order for forum channels.\nSet the default number of seconds that a user must wait …\nSet the flags of the channel, if supported.\nSet the forum topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the kind of channel.\nDelete an override for an member.\nSet the name.\nSet whether the channel is marked as NSFW.\nIf this is specified, and the parent ID is a …\nSet the permission overwrites of a channel. This will …\nSet the position of the channel.\nSet the number of seconds that a user must wait before …\nDelete an override for an role.\nFor voice and stage channels, set the channel’s RTC …\nSet the topic.\nFor voice channels, set the user limit.\nSet the <code>VideoQualityMode</code> for the voice channel.\nCreate an invite, with options.\nDelete an invite by its code.\nGet the invites for a guild channel.\nGet information about an invite by its code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the maximum age for an invite.\nSet the maximum uses for an invite, or 0 for infinite.\nSet the target application ID for this invite.\nSet the target type for this invite.\nSet the target user id for this invite.\nSpecify true if the invite should grant temporary …\nSpecify true if the invite should be unique. Defaults to …\nWhether the invite returned should contain approximate …\nWhether the invite returned should contain its expiration …\nCrosspost a message by <code>Id&lt;ChannelMarker&gt;</code> and …\nDelete a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>…\nDelete messages by <code>Id&lt;ChannelMarker&gt;</code> and a list of …\nGet channel messages, by <code>Id&lt;ChannelMarker&gt;</code>.\nThis struct is returned when one of <code>after</code>, <code>around</code>, or …\nGet a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the maximum number of messages to retrieve.\nSet the maximum number of messages to retrieve.\nSend a message to a channel.\nSpecify the <code>AllowedMentions</code> for the message.\nAttach multiple files to the message.\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s list of embeds.\nWhether to fail sending if the reply no longer exists.\nSet the message’s flags.\nSpecify the ID of another message to forward.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAttach a nonce to the message, for optimistic message …\nJSON encoded body of any additional request fields.\nSpecify if this message is a poll.\nSpecify the ID of another message to create a reply to.\nSet the IDs of up to 3 guild stickers.\nSpecify true if the message is TTS.\nUpdate a message by <code>Id&lt;ChannelMarker&gt;</code> and <code>Id&lt;MessageMarker&gt;</code>…\nSpecify the <code>AllowedMentions</code> for the message.\nAttach multiple new files to the message.\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s list of embeds.\nSet the message’s flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecify multiple <code>Id&lt;AttachmentMarker&gt;</code>s already present in …\nJSON encoded body of any additional request fields.\nCreate a reaction in a <code>Id&lt;ChannelMarker&gt;</code> on a …\nReaction of a custom emoji.\nRemove all reactions of a specified emoji from a message.\nDelete all reactions by all users on a message.\nDelete one reaction by a user on a message.\nGet a list of users that reacted to a message with an <code>emoji</code>…\nHandle a reaction of either a custom or unicode emoji.\nReaction of a unicode emoji, such as “🌈”.\nGet users after this id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the kind of reaction to retrieve.\nSet the maximum number of users to retrieve.\nID of the custom emoji.\nName of the custom emoji.\nUnicode emoji.\nCreate a new stage instance associated with a stage …\nDelete the stage instance of a stage channel.\nGets the stage instance associated with a stage channel, …\nUpdate fields of an existing stage instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the guild scheduled event associated with this stage …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>PrivacyLevel</code> of the instance.\nSet the <code>PrivacyLevel</code> of the instance.\nSet whether to notify everyone when a stage starts.\nSet the new topic of the instance.\nAdd another member to a thread.\nStart a thread that is not connected to a message.\nCreate a new thread from an existing message.\nReturns archived private threads in the channel that the …\nReturns archived private threads in the channel.\nReturns archived public threads in the channel.\nReturns a <code>ThreadMember</code> in a thread.\nReturns the <code>ThreadMember</code>s of the thread.\nAdd the current user to a thread.\nRemove the current user from a thread.\nRemove another member from a thread.\nUpdate a thread.\nFetch the thread members after the user ID.\nSet the forum thread’s applied tags.\nSet whether the thread is archived.\nSet the thread’s auto archive duration.\nSet the thread’s auto archive duration.\nSet the thread’s auto archive duration.\nReturn threads before this ID.\nReturn threads before this ISO 8601 timestamp.\nReturn threads before this ISO 8601 timestamp.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether non-moderators can add other non-moderators to a …\nWhether non-moderators can add other non-moderators to a …\nMaximum number of threads to return.\nMaximum number of threads to return.\nMaximum number of threads to return.\nThe maximum number of thread members to return.\nSet whether the thread is locked.\nSet the name of the thread.\nSet the number of seconds that a user must wait before …\nInclude the associated guild members for each thread …\nCreates a new thread in a forum channel.\nSpecify the <code>AllowedMentions</code> for the message.\nSet the forum thread’s applied tags.\nAttach multiple files to the message.\nSet the default auto archive duration for newly created …\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s list of embeds.\nSet the message’s flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON encoded body of any additional request fields.\nSet the IDs of up to 3 guild stickers.\nCreate a webhook in a channel.\nDelete a webhook by its ID.\nDelete a message created by a webhook.\nExecute a webhook, sending a message to its channel, and …\nGet all the webhooks of a channel.\nGet a webhook by ID.\nGet a webhook message by webhook ID, token, and message ID.\nUpdate a webhook by ID.\nUpdate a webhook, with a token, by ID.\nSet the avatar of the webhook.\nSet the avatar of the webhook.\nSet the avatar of the webhook.\nMove this webhook to a new channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the name of the webhook.\nChange the name of the webhook.\nDelete in a thread belonging to the channel instead of the …\nGet a message in a thread belonging to the channel instead …\nSpecify the token for auth, if not already authenticated …\nSpecify the token for auth, if not already authenticated …\nUpdate a message created by a webhook via execution.\nExecute a webhook, sending a message to its channel.\nSpecify the <code>AllowedMentions</code> for the message.\nAttach multiple files to the message.\nThe URL of the avatar of the webhook.\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s list of embeds.\nSet the message’s flags.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJSON encoded body of any additional request fields.\nExecute in a thread belonging to the channel instead of …\nSet the name of the created thread when used in a forum …\nSpecify true if the message is TTS.\nSpecify the username of the webhook’s message.\nWait for the message to send before sending a response. See\nUpdate a message created by a webhook.\nSpecify the <code>AllowedMentions</code> for the message.\nAttach multiple new files to the message.\nSet the message’s list of <code>Component</code>s.\nSet the message’s content.\nSet the message’s list of embeds.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecify multiple <code>Id&lt;AttachmentMarker&gt;</code>s already present in …\nJSON encoded body of request fields.\nUpdate in a thread belonging to the channel instead of the …\nCreate a new request to create a guild channel.\nBegin a guild prune.\nDelete a guild permanently. The user must be the owner.\nReturns all active threads in the guild.\nGet the audit log for a guild.\nGet information about a guild.\nGet the channels in a guild.\nGet information about the invites of a guild.\nGet the onboarding information for a guild.\nFor public guilds, get the guild preview.\nGet the counts of guild members to be pruned.\nGet a guild’s vanity url, if there is one.\nGet voice region data for the guild.\nGet the webhooks of a guild.\nGet the guild’s welcome screen.\nGet a guild’s widget\nGet a guild’s widget settings.\nUpdate the user’s member in a guild.\nUpdate a guild.\nUpdate a guild’s MFA level.\nUpdate the guild’s welcome screen.\nModify a guild’s widget settings.\nFilter by an action type.\nSet the voice channel where AFK voice users are sent.\nSet how much time it takes for a voice user to be …\nGet audit log entries after the entry specified.\nSet the available tags for the forum.\nSet the banner.\nGet audit log entries before the entry specified.\nFor voice and stage channels, set the bitrate of the …\nSet which channel to display on the widget.\nReturn the amount of pruned members. Discouraged for large …\nSet the number of days that a user must be inactive before …\nSet the number of days that a user must be inactive before …\nSet the default auto archive duration for newly created …\nSet the default forum layout for new forum channels.\nSet the default message notification level. See Discord …\nSet the default reaction emoji for new forum threads.\nSet the default sort order for newly created forum …\nSet the default number of seconds that a user must wait …\nSet the description of the welcome screen.\nSet the guild’s discovery splash image.\nSet whether the welcome screen is enabled.\nSet to true to enable the guild widget.\nSet the explicit content filter level.\nSet the enabled features of the guild.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the icon.\nList of roles to include when pruning.\nList of roles to include when calculating prune count\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the kind of channel.\nSet the maximum number of audit logs to retrieve.\nSet the name of the guild.\nSet the current user’s nickname.\nSet whether the channel is marked as NSFW.\nTransfer ownership to another user.\nIf this is specified, and the parent ID is a …\nSet the permission overwrites of a channel.\nSet the position of the channel.\nSet the preferred locale for the guild.\nSet whether the premium progress bar is enabled.\nSet the public updates channel.\nSet the number of seconds that a user must wait before …\nFor voice and stage channels, set the channel’s RTC …\nSet the rules channel.\nSet the guild’s splash image.\nSet the channel where events such as welcome messages are …\nSet the guild’s <code>SystemChannelFlags</code>.\nSet the topic.\nFilter audit log for entries from a user.\nFor voice channels, set the user limit.\nSet the verification level.\nFor voice channels, set the channel’s video quality mode.\nSet the channels linked in the welcome screen, with …\nSets if you want to receive <code>approximate_member_count</code> and …\nCreate an auto moderation rule within a guild.\nDelete an auto moderation rule in a guild.\nGet an auto moderation rule in a guild.\nGet an auto moderation rule in a guild.\nAppend an action of type <code>BlockMessage</code>.\nAppend an action of type <code>BlockMessage</code> with an explanation …\nAppend an action of type <code>SendAlertMessage</code>.\nAppend an action of type <code>Timeout</code>.\nSet whether the rule is enabled.\nSet the channels where the rule does not apply. See …\nSet the roles to which the rule does not apply. See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the request with the trigger type <code>Keyword</code>, then …\nCreate the request with the trigger type <code>KeywordPreset</code>, …\nCreate the request with the trigger type <code>MentionSpam</code>, then …\nCreate the request with the trigger type <code>Spam</code>, then …\nUpdate an auto moderation rule in a guild.\nSet the list of actions.\nSet whether the rule is enabled.\nSet the rule’s event type.\nSet the channels where the rule does not apply.\nSet the roles to which the rule does not apply.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet the rule’s name.\nSet the trigger metadata.\nBans a user from a guild, optionally with the number of …\nRemove a ban from a user in a guild.\nGet information about a ban of a guild.\nRetrieve the bans for a guild.\nSet the user ID after which to retrieve bans.\nSet the user ID before which to retrieve bans.\nSet the number of seconds’ worth of messages to delete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the maximum number of bans to retrieve.\nThe maximum accepted color value.\nCategory channel fields sent to Discord.\nA builder for a category channel, and its children.\nError creating category fields.\nType of <code>CategoryFieldsError</code> that occurred.\nColor was larger than a valid RGB hexadecimal value.\nCreate a new request to create a guild.\nThe error returned when the guild can not be created as …\nType of <code>CreateGuildError</code> that occurred.\nVariants of channel fields sent to Discord.\nA builder for a list of channels.\nInvalid id for builders.\nThe maximum number of UTF-16 code points that can be in a …\nThe maximum number of UTF-16 code points that can be in a …\nThe maximum number of UTF-16 code points that can be in a …\nThe maximum length of a rate limit.\nThe maximum number of UTF-16 code points that can be in a …\nThe minimum number of UTF-16 code points that can be in a …\nThe minimum number of UTF-16 code points that can be in a …\nThe minimum number of UTF-16 code points that can be in a …\nThe name of the guild is either fewer than 2 UTF-16 …\nThe name is too long.\nThe name is too long.\nThe name is too long.\nThe name is too short.\nThe name is too short.\nThe name is too short.\nThe rate limit is invalid.\nRole fields sent to Discord.\nA builder for role fields.\nError building role fields.\nType of <code>RoleFieldsError</code> that occurred.\nText channel fields sent to Discord.\nA builder for text fields.\nError building text fields.\nType of <code>TextFieldsError</code> that occurred.\nThe number of channels provided is too many.\nThe number of roles provided is too many.\nThe topic is too long.\nVoice channel fields sent to Discord.\nA builder for voice fields.\nError building voice fields.\nType of <code>VoiceFieldsError</code> that occurred.\nAdd a category channel builder, and all its children to …\nAdd a role to the list of roles.\nAdd a child text channel.\nAdd a text channel to the builder.\nadd a child voice channel.\nAdd a voice channel to the builder.\nSet the ID of the AFK voice channel.\nSet the AFK timeout, in seconds.\nSet the voice channel’s bitrate.\nBuild the role fields.\nBuild the text fields.\nBuild the voice fields.\nBuild the list of channels.\nSet the channels to create with the guild.\nSet the role color.\nSet the default message notification level. See Discord …\nSet the explicit content filter level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShow the role above other roles in the user list.\nSet the icon.\nSet the id of the role.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the owned error type and the …\nConsume the error, returning the owned error type and the …\nConsume the error, returning the owned error type and the …\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nConsume the error, returning the source error if there is …\nConsume the error, returning the source error if there is …\nConsume the error, returning the source error if there is …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nImmutable reference to the type of error that occurred.\nImmutable reference to the type of error that occurred.\nImmutable reference to the type of error that occurred.\nImmutable reference to the type of error that occurred.\nAllow the role to be @mentioned.\nCreate a new default role field builder.\nCreate a new text fields builder.\nCreate a new voice fields builder.\nCreate a new category fields builder.\nCreate a new channels builder.\nMake the channel NSFW.\nOverride the everyone role of the guild.\nSet the channel’s permission overwrites.\nSet the channel’s permission overwrites.\nSet the permissions of the role.\nSet the position of the role.\nSet the channel’s rate limit per user.\nSet the roles to create with the guild.\nSet the guild’s <code>SystemChannelFlags</code>.\nSet the channel where system messages will be posted.\nSet the channel’s topic.\nSet the voice channel’s user limit.\nThe invalid name.\nThe invalid name.\nProvided channels.\nProvided name.\nProvided roles.\nProvided color hex value.\nThe incorrect rate limit.\nThe invalid name.\nThe invalid name.\nThe incorrect topic.\nThe invalid name.\nThe invalid name.\nCreate an emoji in a guild.\nDelete an emoji in a guild, by id.\nGet an emoji for a guild by the the guild’s ID and emoji…\nGet the emojis for a guild, by the guild’s id.\nUpdate an emoji in a guild, by id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the name of the emoji.\nWhitelist roles for this emoji.\nChange the roles that the emoji is whitelisted to.\nDelete an integration for a guild, by the integration’s …\nGet the guild’s integrations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd a role to a member in a guild.\nGet the members of a guild, by id.\nGet a member of a guild, by id.\nKick a member from a guild, by their id.\nRemove a role from a member in a guild, by id.\nSearch the members of a specific guild by a query.\nUpdate a guild member.\nSets the user ID to get members after.\nMove the member to a different voice channel.\nSet the member’s Guild Timeout.\nWhether the new member will be unable to hear audio when …\nIf true, restrict the member’s ability to hear sound …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the number of members to retrieve per request.\nSets the number of members to retrieve per request.\nWhether the new member will be unable to speak in voice …\nIf true, restrict the member’s ability to speak in a …\nSet the user’s initial nickname.\nSet the nickname.\nList of roles to assign the new member.\nSet the new list of roles for a member.\nCreate a role in a guild.\nDelete a role in a guild, by id.\nGet the roles of a guild.\nUpdate a role by guild id and its id.\nModify the position of the roles.\nSet the role color.\nSet the role color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf true, display the role in the members list.\nIf true, display the role in the members list.\nSet the icon of the role.\nSet the icon of the role.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, the role can be @mentioned (pinged) in chat.\nIf true, the role can be @mentioned (pinged) in chat.\nSet the name of the role.\nSet the name of the role.\nSet the allowed permissions of this role.\nSet the allowed permissions of this role.\nSet the unicode emoji of a role.\nSet the unicode emoji of a role.\nCreates a sticker in a guild, and returns the created …\nDeletes a guild sticker by the ID of the guild and its ID.\nReturns a guild sticker by the guild’s ID and the sticker…\nReturns a list of stickers in a guild.\nUpdates a sticker in a guild, and returns the updated …\nSet the sticker’s description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the sticker’s name.\nSet the sticker’s tags.\nModify the positions of the channels.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdate the guild’s onboarding flow\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the current user’s voice state.\nUpdate another user’s voice state.\nSpecify the ID of the stage channel which the user is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the user’s request to speak.\nToggle the user’s suppress state.\nToggle the user’s suppress state.\nGets the data for a poll answer.\nSet the user ID to get voters after.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the limit of voters to get.\nCreate an external scheduled event in a guild.\nCreate a scheduled event in a guild.\nCreate a stage instance scheduled event in a guild.\nCreate a voice channel scheduled event in a guild.\nDelete a scheduled event in a guild.\nGet a scheduled event in a guild.\nGet a list of users subscribed to a scheduled event.\nGet a list of scheduled events in a guild.\nUpdate a scheduled event in a guild.\nGet users after this user ID.\nGet users before this user ID.\nSet the channel ID.\nSet the description of the event.\nSet the description of the event.\nSet the description of the event.\nSet the description of the event.\nSet the <code>EntityType</code> of the scheduled event.\nCreate an external scheduled event in a guild.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the cover image of the event.\nSet the cover image of the event.\nSet the cover image of the event.\nSet the cover image of the event.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the limit of users to return.\nSet the location of the external scheduled event.\nSet the name of the event.\nSet the scheduled end time of the event.\nSet the scheduled end time of the event.\nSet the scheduled end time of the event.\nSet the scheduled start time of the event.\nCreate a stage instance scheduled event in a guild.\nSet the status of the event.\nCreate a voice channel scheduled event in a guild.\nSet whether to return member objects with each user.\nSet whether to include the number of subscribed users.\nSet whether to include the number of subscribed users.\nReturns a single sticker by its ID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a list of sticker packs available to Nitro …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new guild based on a template.\nCreate a template from the current state of the guild.\nDelete a template by ID and code.\nGet a template by its code.\nGet a list of templates in a guild, by ID.\nSync a template to the current state of the guild, by ID …\nUpdate the template’s metadata, by ID and code.\nSet the template’s description.\nSet the description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the icon.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the name.\nCreate a DM channel with a user.\nGet information about the current user.\nGet the current user’s connections.\nGet information about the current user in a guild.\nReturns a list of guilds for the current user.\nGet a user’s information by id.\nLeave a guild by id.\nUpdate the current user.\nGet guilds after this guild id.\nSet the user’s avatar.\nSet the user’s banner.\nGet guilds before this guild id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the maximum number of guilds to retrieve.\nSet the username.\nResponse body is not a UTF-8 valid string.\nFuture resolving to the bytes of a response body.\nResponse body couldn’t be chunked.\nDecompressing the response failed.\nFailure when processing a response body.\nType of <code>DeserializeBodyError</code> that occurred.\nDeserializing the model failed.\nIterator over the headers of a <code>Response</code>.\nFuture resolving to a deserialized model.\nResponse wrapper containing helper functions over the HTTP …\nFuture that will resolve to a <code>Response</code>.\nStatus code of a response.\nFuture resolving to the text of a response body.\nConsume the response and accumulate the chunked body into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRaw status code value.\nIterator of the response headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nWhether the status code is a client error.\nWhether the status code is informational.\nWhether the status code is a redirection.\nWhether the status code is a server error.\nWhether the status code is a success.\nImmutable reference to the type of error that occurred.\nMarkers denoting the type of response body.\nConsume the response, chunking the body and then …\nConsume the response, chunking the body and then …\nConsume the response, chunking the body and then …\nSet a function to call after clearing the ratelimiter but …\nStatus code of the response.\nConsume the response and accumulate the body into a string.\nRaw response body bytes that could not be converted into a …\nMarker that a response has no body. Responses with this …\nMarker that a response has a list of something.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRoute information to add a user to a guild.\nRoute information to add a role to guild member.\nRoute information to add a member to a thread.\nOperating on global commands.\nOperating on a specific command.\nOperating on commands in a guild.\nOperating on a specific command in a guild.\nOperating on an application’s entitlements.\nOperating on an application’s SKUs.\nOperating on current user application,\nOperating on a channel.\nOperating on a channel’s followers.\nOperating on a channel’s invites.\nOperating on a channel’s messages.\nOperating on a channel’s messages by bulk deleting.\nOperating on an individual channel’s message.\nCrossposting an individual channel’s message.\nOperating on an individual channel’s message’s …\nOperating on an individual channel’s message’s …\nOperating on an individual channel’s message’s threads.\nOperating on a channel’s permission overwrites by ID.\nOperating on a channel’s pins.\nOperating on a channel’s individual pinned message.\nOperating on a channel’s polls.\nOperating on a group DM’s recipients.\nOperating on a thread’s members.\nOperating on a thread’s member.\nOperating on a channel’s threads.\nOperating on a channel’s typing indicator.\nOperating on a channel’s webhooks.\nRoute information to create an auto moderation rule.\nRoute information to create a ban on a user in a guild.\nRoute information to create a channel in a guild.\nRoute information to create an emoji in a guild.\nRoute information to create a thread in a forum channel.\nRoute information to create a global command.\nRoute information to create a guild.\nRoute information to create a guild command.\nRoute information to create a guild from a template.\nRoute information to create a guild’s integration.\nRoute information to create a prune in a guild.\nRoute information to create a scheduled event in a guild.\nRoute information to create a sticker in a guild.\nRoute information to create an invite to a channel.\nRoute information to create a message in a channel.\nRoute information to create a private channel.\nRoute information to create a reaction on a message.\nRoute information to create a role in a guild.\nRoute information to create a stage instance.\nRoute information to create a guild template.\nRoute information to create a thread in a channel.\nRoute information to create a thread from a message.\nRoute information to create a typing trigger in a channel.\nRoute information to create a webhook in a channel.\nRoute information to crosspost a message to following …\nRoute information to delete an auto moderation rule for a …\nRoute information to delete a ban on a user in a guild.\nRoute information to delete a channel.\nRoute information to delete a guild’s custom emoji.\nRoute information to delete a global command.\nRoute information to delete a guild.\nRoute information to delete a guild command.\nRoute information to delete a guild integration.\nRoute information to delete a scheduled event in a guild.\nRoute information to delete a guild sticker.\nRoute information to delete the original interaction …\nRoute information to delete an invite.\nRoute information to delete a channel’s message.\nRoute information to delete all of the reactions on a …\nRoute information to delete all of the reactions on a …\nRoute information to bulk delete messages in a channel.\nRoute information to delete a permission overwrite for a …\nRoute information to delete a user’s reaction on a …\nRoute information to delete the current user’s reaction …\nRoute information to delete a guild’s role.\nRoute information to delete a stage instance.\nRoute information to delete a guild template.\nRoute information to delete a test entitlement.\nRoute information to delete a webhook.\nRoute information to delete a message created by a webhook.\nRoute information to end a poll.\nRoute information to execute a webhook by ID and token.\nRoute information to follow a news channel.\nOperating with the gateway information.\nOperating with the gateway information tailored to the …\nRoute information to get active threads in a channel.\nRoute information for fetching poll vote information.\nRoute information to get a paginated list of audit logs in …\nRoute information to get an auto moderation rule for a …\nRoute information to get information about a single ban in …\nRoute information to get a guild’s bans.\nRoute information to get a guild’s bans with parameters.\nRoute information to get a channel.\nRoute information to get a channel’s invites.\nRoute information to get a channel’s webhooks.\nRoute information to get a guild’s channels.\nRoute information to get permissions of a specific guild …\nRoute information to get the current OAuth2 authorization …\nRoute information to get the current user.\nRoute information to get info about application the …\nRoute information to get the current user as a member …\nRoute information to get an emoji by ID within a guild.\nRoute information to get a guild’s emojis.\nRoute to get a followup message for an interaction.\nRoute information to get basic gateway information.\nRoute information to get gateway information tailored to …\nRoute information to get a global command for an …\nRoute information to get a guild.\nRoute information to get a list of automation rules for a …\nRoute information to get a guild command.\nRoute information to get permissions of all guild commands.\nRoute information to get guild commands.\nRoute information to get a guild’s integrations.\nRoute information to get a guild’s invites.\nRoute information to get a guild’s members.\nRoute information to get a guild’s onboarding …\nRoute information to get a guild’s preview.\nRoute information to get the number of members that would …\nRoute information to get a guild’s roles.\nRoute information to get a guild scheduled event.\nRoute information to get a guild scheduled event’s …\nRoute information to get a guild’s scheduled events.\nRoute information to get a guild’s sticker.\nRoute information to get a guild’s stickers.\nRoute information to get a guild’s vanity URL.\nRoute information to get a guild’s available voice …\nRoute information to get a guild’s webhooks.\nRoute information to get a guild’s welcome screen.\nRoute information to get a guild’s widget.\nRoute information to get a guild’s widget settings.\nRoute information to get a paginated list of guilds.\nRoute information to get an original interaction response …\nRoute information to get an invite.\nRoute information to get an invite with an expiration.\nRoute information to get joined private archived threads …\nRoute information to get a member.\nRoute information to get a single message in a channel.\nRoute information to get a paginated list of messages in a …\nRoute information to get a list of sticker packs available …\nRoute information to get a channel’s pins.\nRoute information to get private archived threads in a …\nRoute information to get public archived threads in a …\nRoute information to get the users who reacted to a …\nRoute information to get a stage instance.\nRoute information to get a sticker.\nRoute information to get a template.\nRoute information to get a list of templates from a guild.\nRoute information to get a member of a thread.\nRoute information to get members of a thread.\nRoute information to get a user.\nRoute information to get the current user’s connections.\nRoute information to get the current user’s private …\nRoute information to get a list of the voice regions.\nRoute information to get a webhook by ID, optionally with …\nRoute information to get a previously-sent webhook message.\nOperating on the guild resource.\nOperating on one of user’s guilds.\nOperating on a ban from one of the user’s guilds.\nOperating on a guild’s auto moderation rules.\nOperating on an auto moderation rule from  one of the user…\nOperating on one of the user’s guilds’ bans.\nOperating on a ban from one of the user’s guilds.\nOperating on specific member’s ban from one of the user…\nOperating on one of the user’s guilds’ channels.\nOperating on one of the user’s guilds’ emojis.\nOperating on an emoji from one of the user’s guilds.\nOperating on one of the user’s guilds’ integrations.\nOperating on an integration from one of the user’s …\nOperating on an integration from one of the user’s …\nOperating on one of the user’s guilds’ invites.\nOperating on one of the user’s guilds’ members.\nOperating on a member from one of the user’s guilds.\nOperating on a role of a member from one of the user’s …\nOperating on the user’s nickname in one of the user’s …\nOperating on one of the user’s guilds’ members by …\nOperating on one of the user’s guilds’ MFA level.\nOperating on one of the user’s guilds’ onboarding.\nOperating on one of the user’s guilds’ by previewing …\nOperating on one of the user’s guilds’ by pruning …\nOperating on the voice regions of one of the user’s …\nOperating on the roles of one of the user’s guilds.\nOperating on a role of one of the user’s guilds.\nOperating on the guild’s scheduled events.\nOperating on a particular guild’s scheduled events.\nOperating on a particular guild’s scheduled event users.\nOperating on one of the user’s guilds’ stickers.\nOperating on one of the user’s guilds’ templates.\nOperating on a template from one of the user’s guilds.\nOperating on one of the user’s guilds’ threads.\nOperating on one of the user’s guilds’ vanity URL.\nOperating on one of the user’s guilds’ voice states.\nOperating on one of the user’s guilds’ webhooks.\nOperating on one of the user’s guilds’ welcome screen.\nOperating on one of the user’s guild’s widget settings.\nOperating on one of the user’s guild’s widget.\nOperating on a guild template.\nThe ID couldn’t be parsed as an integer.\nOperating on an interaction’s callback.\nRoute information to respond to an interaction.\nOperating on an invite.\nRoute information to join a thread as the current user.\nRoute information to leave the guild.\nRoute information to leave a thread as the current user.\nWhen parsing into a <code>Path::ChannelsIdMessagesId</code> variant, …\nA static path for the provided path string wasn’t found.\nOperating on the user’s application information.\nOperating on the current authorization’s information.\nAn enum representing a path, most useful for ratelimiting …\nError returned when a <code>Path</code> could not be parsed from a …\nType of <code>PathParseError</code> specifying what failed to parse.\nRoute information to pin a message to a channel.\nRoute information to remove a member from a guild.\nRoute information to remove a role from a member.\nRoute information to remove a member from a thread.\nRoute information to search for members in a guild.\nRoute information to set global commands.\nRoute information to set guild commands.\nOperating on stage instances.\nOperating on sticker packs.\nOperating on a sticker.\nRoute information to sync a guild’s integration.\nRoute information to sync a template.\nRoute information to unpin a message from a channel.\nRoute information to update an auto moderation rule for a …\nRoute information to update a channel, such as a guild …\nRoute information to edit permissions of a command in a …\nRoute information to update the current member.\nRoute information to update the current user.\nRoute information to update the current user’s voice …\nRoute information to update an emoji.\nRoute information to update a global command.\nRoute information to update a guild.\nRoute information to update a guild channel.\nRoute information to update a guild command.\nRoute information to update a guild’s integration.\nRoute information to update a guild’s MFA level.\nRoute information to update a scheduled event in a guild.\nRoute information to update a guild sticker.\nRoute information to update a guild’s welcome screen.\nRoute information to update a guild’s widget settings.\nUpdate the original interaction response.\nRoute information to update a member.\nRoute information to update a message.\nRoute information to update the current member’s …\nRoute information to update the permission overwrite of a …\nRoute information to update a role.\nRoute information to update the positions of roles.\nRoute information to update an existing stage instance.\nRoute information to update a template.\nRoute information to update a user’s voice state.\nRoute information to update a webhook.\nRoute information to update a message created by a webhook.\nOperating on a sticker.\nOperating on the user’s private channels.\nOperating on the user’s connections.\nOperating on the state of a guild that the user is in.\nOperating on the state of a guild that the user is in.\nOperating on the state of a guild that the user, as a …\nOperating on the voice regions available to the current …\nOperating on a webhook as a bot.\nOperating on a webhook as a webhook.\nOperating on a message created by a webhook.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a string into a path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the error, returning the owned error type and the …\nConsume the error, returning the source error if there is …\nImmutable reference to the type of error that occurred.\nHTTP method of the route.\nTyped path of the route.\nThe ID of the channel.\nThe type of action to get audit logs for.\nGet users after this user ID.\nThe minimum ID of audit logs to get.\nUser ID after which to retrieve bans.\nRetrieve entitlements after this time.\nThe minimum ID of members to get.\nGet members after this ID.\nThe minimum ID of guilds to get.\nThe minimum ID of messages to get.\nThe minimum ID of users to get.\nFetch thread members after this user ID.\nThe id of the poll answer.\nThe ID of the owner application.\nThe ID of the owner application.\nThe ID of the application.\nThe ID of the owner application.\nThe ID of the owner application.\nThe ID of the owner application\nThe ID of the application.\nThe ID of the application.\nThe ID of the application.\nID of the application.\nID of the owner application.\nThe ID of the owner application.\nID of the owner application.\nThe ID of the application.\nThe ID of the owner application.\nID of the owner application.\nThe ID of the application.\nThe ID of the owner application.\nThe ID of the owner application.\nThe ID of the application.\nThe ID of the owner application.\nThe ID of the owner application.\nThe ID of the owner application.\nThe message ID to get the messages around.\nID of the auto moderation rule.\nID of the auto moderation rule.\nID of the auto moderation rule.\nThe maximum ID of audit logs to get.\nUser ID before which to retrieve bans.\nRetrieve entitlements before this time.\nGet members before this ID.\nThe maximum ID of guilds to get.\nOptional timestamp to return threads before.\nThe maximum ID of messages to get.\nOptional timestamp to return threads before.\nOptional timestamp to return threads before.\nID of the thread.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nID of the channel.\nID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nID of the channel.\nID of the stage channel.\nThe ID of the channel to follow.\nThe ID of the channel the poll is in.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nID of the channel.\nID of the channel.\nThe ID of the channel.\nID of the stage channel.\nID of the thread.\nID of the thread.\nID of the thread.\nID of the thread.\nThe ID of the channel.\nID of the thread.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nThe ID of the channel.\nID of the stage channel.\nThe unique invite code.\nThe unique invite code.\nThe unique invite code.\nThe ID of the command.\nThe ID of the command.\nThe ID of the command.\nID of the command.\nID of the command.\nThe ID of the command.\nThe ID of the command.\nThe ID of the command.\nWhether to compute the number of pruned users.\nThe number of days that a user must be offline before …\nThe number of days that a user must be offline before …\nThe URI encoded custom or unicode emoji.\nThe URI encoded custom or unicode emoji.\nThe URI encoded custom or unicode emoji.\nURI encoded custom or unicode emoji.\nThe URI encoded custom or unicode emoji.\nThe ID of the emoji.\nThe ID of the emoji.\nThe ID of the emoji.\nThe ID of the entitlement.\nWhether to exclude ended entitlements.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nGuild ID to look up entitlements for.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild to get onboarding information for.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild to search in.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe ID of the guild to update onboarding information for.\nID of the guild.\nID of the guild.\nID of the guild.\nID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nThe ID of the guild.\nID of the guild.\nThe roles to filter the prune by.\nThe roles to filter the prune by.\nThe ID of the integration.\nThe ID of the integration.\nThe ID of the integration.\nThe ID of the interaction.\nThe token of the interaction.\nToken of the interaction.\nToken of the interaction.\nThe token for the interaction.\nThe token for the interaction.\nThe type of reactions to fetch.\nThe maximum number of users to return (1-100).\nThe maximum number of audit logs to get.\nMaximum number of bans to retrieve.\nNumber of entitlements to return. Set to 100 if …\nThe maximum number of members to get.\nMaximum amount of members to get.\nThe maximum number of guilds to get.\nOptional maximum number of threads to return.\nThe maximum number of messages to get.\nOptional maximum number of threads to return.\nOptional maximum number of threads to return.\nThe maximum number of users to retrieve.\nMaximum number of thread members to return.\nUpper limit of members to query for.\nThe ID of the message.\nID of the message.\nThe ID of the message.\nThe ID of the message.\nThe ID of the message.\nThe ID of the message.\nThe ID of the message.\nID of the message.\nThe message ID of the poll.\nID of the followup message.\nThe ID of the message.\nThe ID of the message.\nID of the message.\nThe ID of the message.\nThe ID of the message.\nThe ID of the message.\nQuery to search by.\nThe ID of the role.\nThe ID of the role.\nThe ID of the role.\nThe ID of the role.\nID of the scheduled event.\nID of the scheduled event.\nID of the scheduled event.\nList of SKU IDs to check entitlements for.\nID of the sticker.\nID of the stickers.\nID of the sticker.\nID of the sticker.\nThe ID of the target role or user.\nThe ID of the role or user.\nCode of the template.\nThe target template code.\nThe template code.\nThe template code.\nThe template code.\nID of the thread channel, if there is one.\nID of the thread channel, if there is one.\nID of the thread channel, if there is one.\nID of the thread channel, if there is one.\nID of the thread channel, if there is one.\nThe token of the webhook.\nThe token of the webhook.\nThe token of the webhook.\nToken of the webhook.\nThe token of the webhook.\nThe ID of the user.\nID of the member.\nThe ID of the user.\nThe ID of the user.\nThe ID of the user.\nThe ID of the user, if specified.\nThe ID of the user.\nUser ID to look up entitlements for.\nThe ID of the user.\nID of the member.\nID of the target user.\nThe ID of the user.\nThe ID of the user.\nID of the member.\nThe ID of the user.\nID of the user.\nWhether to wait for a message response.\nThe ID of the webhook.\nThe ID of the webhook.\nThe ID of the webhook.\nID of the webhook.\nThe ID of the webhook.\nWhether to include approximate member and presence counts …\nWhether to retrieve statistics about the invite.\nWhether to retrieve statistics about the invite.\nWhether to retrieve the expiration date of the invite.\nWhether to include full localization dictionaries.\nWhether to include full localization dictionaries.\nWhether to return a member object.\nWhether to include associated member objects.\nWhether to include user counts.\nWhether to include user counts.")